### YamlMime:ManagedReference
items:
- uid: TicketShopWebApplication.Controllers.AccountController
  commentId: T:TicketShopWebApplication.Controllers.AccountController
  id: AccountController
  parent: TicketShopWebApplication.Controllers
  children:
  - TicketShopWebApplication.Controllers.AccountController.#ctor(SignInManager{TicketShopWebApplication.Data.ApplicationUser},ILogger{TicketShopWebApplication.Controllers.AccountController})
  - TicketShopWebApplication.Controllers.AccountController.Logout
  langs:
  - csharp
  - vb
  name: AccountController
  nameWithType: AccountController
  fullName: TicketShopWebApplication.Controllers.AccountController
  type: Class
  source:
    id: AccountController
    path: C:\Users\Adriana\Documents\GitHub\ticketSystem-team-terminator\src\TicketShopWebApplication\Controllers\AccountController.cs
    startLine: 11
  assemblies:
  - TicketShopWebApplication
  namespace: TicketShopWebApplication.Controllers
  syntax:
    content: 'public class AccountController : Controller'
    content.vb: >-
      Public Class AccountController
          Inherits Controller
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TicketShopWebApplication.Controllers.AccountController.#ctor(SignInManager{TicketShopWebApplication.Data.ApplicationUser},ILogger{TicketShopWebApplication.Controllers.AccountController})
  commentId: M:TicketShopWebApplication.Controllers.AccountController.#ctor(SignInManager{TicketShopWebApplication.Data.ApplicationUser},ILogger{TicketShopWebApplication.Controllers.AccountController})
  id: '#ctor(SignInManager{TicketShopWebApplication.Data.ApplicationUser},ILogger{TicketShopWebApplication.Controllers.AccountController})'
  parent: TicketShopWebApplication.Controllers.AccountController
  langs:
  - csharp
  - vb
  name: AccountController(SignInManager<ApplicationUser>, ILogger<AccountController>)
  nameWithType: AccountController.AccountController(SignInManager<ApplicationUser>, ILogger<AccountController>)
  fullName: TicketShopWebApplication.Controllers.AccountController.AccountController(SignInManager<TicketShopWebApplication.Data.ApplicationUser>, ILogger<TicketShopWebApplication.Controllers.AccountController>)
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\Adriana\Documents\GitHub\ticketSystem-team-terminator\src\TicketShopWebApplication\Controllers\AccountController.cs
    startLine: 17
  assemblies:
  - TicketShopWebApplication
  namespace: TicketShopWebApplication.Controllers
  syntax:
    content: public AccountController(SignInManager<ApplicationUser> signInManager, ILogger<AccountController> logger)
    parameters:
    - id: signInManager
      type: SignInManager{TicketShopWebApplication.Data.ApplicationUser}
    - id: logger
      type: ILogger{TicketShopWebApplication.Controllers.AccountController}
    content.vb: Public Sub New(signInManager As SignInManager(Of ApplicationUser), logger As ILogger(Of AccountController))
  overload: TicketShopWebApplication.Controllers.AccountController.#ctor*
  nameWithType.vb: AccountController.AccountController(SignInManager(Of ApplicationUser), ILogger(Of AccountController))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TicketShopWebApplication.Controllers.AccountController.AccountController(SignInManager(Of TicketShopWebApplication.Data.ApplicationUser), ILogger(Of TicketShopWebApplication.Controllers.AccountController))
  name.vb: AccountController(SignInManager(Of ApplicationUser), ILogger(Of AccountController))
- uid: TicketShopWebApplication.Controllers.AccountController.Logout
  commentId: M:TicketShopWebApplication.Controllers.AccountController.Logout
  id: Logout
  parent: TicketShopWebApplication.Controllers.AccountController
  langs:
  - csharp
  - vb
  name: Logout()
  nameWithType: AccountController.Logout()
  fullName: TicketShopWebApplication.Controllers.AccountController.Logout()
  type: Method
  source:
    id: Logout
    path: C:\Users\Adriana\Documents\GitHub\ticketSystem-team-terminator\src\TicketShopWebApplication\Controllers\AccountController.cs
    startLine: 23
  assemblies:
  - TicketShopWebApplication
  namespace: TicketShopWebApplication.Controllers
  syntax:
    content: public Task<IActionResult> Logout()
    return:
      type: Task{IActionResult}
    content.vb: Public Function Logout As Task(Of IActionResult)
  overload: TicketShopWebApplication.Controllers.AccountController.Logout*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: TicketShopWebApplication.Controllers
  commentId: N:TicketShopWebApplication.Controllers
  isExternal: false
  name: TicketShopWebApplication.Controllers
  nameWithType: TicketShopWebApplication.Controllers
  fullName: TicketShopWebApplication.Controllers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: TicketShopWebApplication.Controllers.AccountController.#ctor*
  commentId: Overload:TicketShopWebApplication.Controllers.AccountController.#ctor
  isExternal: false
  name: AccountController
  nameWithType: AccountController.AccountController
  fullName: TicketShopWebApplication.Controllers.AccountController.AccountController
- uid: SignInManager{TicketShopWebApplication.Data.ApplicationUser}
  commentId: '!:SignInManager{TicketShopWebApplication.Data.ApplicationUser}'
  definition: SignInManager`1
  name: SignInManager<ApplicationUser>
  nameWithType: SignInManager<ApplicationUser>
  fullName: SignInManager<TicketShopWebApplication.Data.ApplicationUser>
  nameWithType.vb: SignInManager(Of ApplicationUser)
  fullName.vb: SignInManager(Of TicketShopWebApplication.Data.ApplicationUser)
  name.vb: SignInManager(Of ApplicationUser)
  spec.csharp:
  - uid: SignInManager`1
    name: SignInManager
    nameWithType: SignInManager
    fullName: SignInManager
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TicketShopWebApplication.Data.ApplicationUser
    name: ApplicationUser
    nameWithType: ApplicationUser
    fullName: TicketShopWebApplication.Data.ApplicationUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SignInManager`1
    name: SignInManager
    nameWithType: SignInManager
    fullName: SignInManager
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TicketShopWebApplication.Data.ApplicationUser
    name: ApplicationUser
    nameWithType: ApplicationUser
    fullName: TicketShopWebApplication.Data.ApplicationUser
  - name: )
    nameWithType: )
    fullName: )
- uid: ILogger{TicketShopWebApplication.Controllers.AccountController}
  commentId: '!:ILogger{TicketShopWebApplication.Controllers.AccountController}'
  definition: ILogger`1
  name: ILogger<AccountController>
  nameWithType: ILogger<AccountController>
  fullName: ILogger<TicketShopWebApplication.Controllers.AccountController>
  nameWithType.vb: ILogger(Of AccountController)
  fullName.vb: ILogger(Of TicketShopWebApplication.Controllers.AccountController)
  name.vb: ILogger(Of AccountController)
  spec.csharp:
  - uid: ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TicketShopWebApplication.Controllers.AccountController
    name: AccountController
    nameWithType: AccountController
    fullName: TicketShopWebApplication.Controllers.AccountController
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TicketShopWebApplication.Controllers.AccountController
    name: AccountController
    nameWithType: AccountController
    fullName: TicketShopWebApplication.Controllers.AccountController
  - name: )
    nameWithType: )
    fullName: )
- uid: SignInManager`1
  isExternal: true
  name: SignInManager<>
  nameWithType: SignInManager<>
  fullName: SignInManager<>
  nameWithType.vb: SignInManager(Of )
  fullName.vb: SignInManager(Of )
  name.vb: SignInManager(Of )
  spec.csharp:
  - uid: SignInManager`1
    name: SignInManager
    nameWithType: SignInManager
    fullName: SignInManager
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SignInManager`1
    name: SignInManager
    nameWithType: SignInManager
    fullName: SignInManager
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: ILogger`1
  isExternal: true
  name: ILogger<>
  nameWithType: ILogger<>
  fullName: ILogger<>
  nameWithType.vb: ILogger(Of )
  fullName.vb: ILogger(Of )
  name.vb: ILogger(Of )
  spec.csharp:
  - uid: ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: TicketShopWebApplication.Controllers.AccountController.Logout*
  commentId: Overload:TicketShopWebApplication.Controllers.AccountController.Logout
  isExternal: false
  name: Logout
  nameWithType: AccountController.Logout
  fullName: TicketShopWebApplication.Controllers.AccountController.Logout
- uid: Task{IActionResult}
  commentId: '!:Task{IActionResult}'
  definition: Task`1
  name: Task<IActionResult>
  nameWithType: Task<IActionResult>
  fullName: Task<IActionResult>
  nameWithType.vb: Task(Of IActionResult)
  fullName.vb: Task(Of IActionResult)
  name.vb: Task(Of IActionResult)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IActionResult
    name: IActionResult
    nameWithType: IActionResult
    fullName: IActionResult
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IActionResult
    name: IActionResult
    nameWithType: IActionResult
    fullName: IActionResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
