### YamlMime:ManagedReference
items:
- uid: TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel
  commentId: T:TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel
  id: TwoFactorAuthenticationModel
  parent: TicketShopWebApplication.Pages.Account.Manage
  children:
  - TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel.#ctor(UserManager{TicketShopWebApplication.Data.ApplicationUser},SignInManager{TicketShopWebApplication.Data.ApplicationUser},ILogger{TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel})
  - TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel.HasAuthenticator
  - TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel.Is2faEnabled
  - TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel.OnGet
  - TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel.RecoveryCodesLeft
  langs:
  - csharp
  - vb
  name: TwoFactorAuthenticationModel
  nameWithType: TwoFactorAuthenticationModel
  fullName: TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel
  type: Class
  source:
    id: TwoFactorAuthenticationModel
    path: C:\Users\Adriana\Documents\GitHub\ticketSystem-team-terminator\src\TicketShopWebApplication\Pages\Account\Manage\TwoFactorAuthentication.cshtml.cs
    startLine: 12
  assemblies:
  - TicketShopWebApplication
  namespace: TicketShopWebApplication.Pages.Account.Manage
  syntax:
    content: 'public class TwoFactorAuthenticationModel : PageModel'
    content.vb: >-
      Public Class TwoFactorAuthenticationModel
          Inherits PageModel
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel.#ctor(UserManager{TicketShopWebApplication.Data.ApplicationUser},SignInManager{TicketShopWebApplication.Data.ApplicationUser},ILogger{TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel})
  commentId: M:TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel.#ctor(UserManager{TicketShopWebApplication.Data.ApplicationUser},SignInManager{TicketShopWebApplication.Data.ApplicationUser},ILogger{TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel})
  id: '#ctor(UserManager{TicketShopWebApplication.Data.ApplicationUser},SignInManager{TicketShopWebApplication.Data.ApplicationUser},ILogger{TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel})'
  parent: TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel
  langs:
  - csharp
  - vb
  name: TwoFactorAuthenticationModel(UserManager<ApplicationUser>, SignInManager<ApplicationUser>, ILogger<TwoFactorAuthenticationModel>)
  nameWithType: TwoFactorAuthenticationModel.TwoFactorAuthenticationModel(UserManager<ApplicationUser>, SignInManager<ApplicationUser>, ILogger<TwoFactorAuthenticationModel>)
  fullName: TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel.TwoFactorAuthenticationModel(UserManager<TicketShopWebApplication.Data.ApplicationUser>, SignInManager<TicketShopWebApplication.Data.ApplicationUser>, ILogger<TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel>)
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\Adriana\Documents\GitHub\ticketSystem-team-terminator\src\TicketShopWebApplication\Pages\Account\Manage\TwoFactorAuthentication.cshtml.cs
    startLine: 20
  assemblies:
  - TicketShopWebApplication
  namespace: TicketShopWebApplication.Pages.Account.Manage
  syntax:
    content: public TwoFactorAuthenticationModel(UserManager<ApplicationUser> userManager, SignInManager<ApplicationUser> signInManager, ILogger<TwoFactorAuthenticationModel> logger)
    parameters:
    - id: userManager
      type: UserManager{TicketShopWebApplication.Data.ApplicationUser}
    - id: signInManager
      type: SignInManager{TicketShopWebApplication.Data.ApplicationUser}
    - id: logger
      type: ILogger{TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel}
    content.vb: Public Sub New(userManager As UserManager(Of ApplicationUser), signInManager As SignInManager(Of ApplicationUser), logger As ILogger(Of TwoFactorAuthenticationModel))
  overload: TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel.#ctor*
  nameWithType.vb: TwoFactorAuthenticationModel.TwoFactorAuthenticationModel(UserManager(Of ApplicationUser), SignInManager(Of ApplicationUser), ILogger(Of TwoFactorAuthenticationModel))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel.TwoFactorAuthenticationModel(UserManager(Of TicketShopWebApplication.Data.ApplicationUser), SignInManager(Of TicketShopWebApplication.Data.ApplicationUser), ILogger(Of TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel))
  name.vb: TwoFactorAuthenticationModel(UserManager(Of ApplicationUser), SignInManager(Of ApplicationUser), ILogger(Of TwoFactorAuthenticationModel))
- uid: TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel.HasAuthenticator
  commentId: P:TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel.HasAuthenticator
  id: HasAuthenticator
  parent: TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel
  langs:
  - csharp
  - vb
  name: HasAuthenticator
  nameWithType: TwoFactorAuthenticationModel.HasAuthenticator
  fullName: TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel.HasAuthenticator
  type: Property
  source:
    id: HasAuthenticator
    path: C:\Users\Adriana\Documents\GitHub\ticketSystem-team-terminator\src\TicketShopWebApplication\Pages\Account\Manage\TwoFactorAuthentication.cshtml.cs
    startLine: 30
  assemblies:
  - TicketShopWebApplication
  namespace: TicketShopWebApplication.Pages.Account.Manage
  syntax:
    content: public bool HasAuthenticator { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property HasAuthenticator As Boolean
  overload: TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel.HasAuthenticator*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel.RecoveryCodesLeft
  commentId: P:TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel.RecoveryCodesLeft
  id: RecoveryCodesLeft
  parent: TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel
  langs:
  - csharp
  - vb
  name: RecoveryCodesLeft
  nameWithType: TwoFactorAuthenticationModel.RecoveryCodesLeft
  fullName: TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel.RecoveryCodesLeft
  type: Property
  source:
    id: RecoveryCodesLeft
    path: C:\Users\Adriana\Documents\GitHub\ticketSystem-team-terminator\src\TicketShopWebApplication\Pages\Account\Manage\TwoFactorAuthentication.cshtml.cs
    startLine: 32
  assemblies:
  - TicketShopWebApplication
  namespace: TicketShopWebApplication.Pages.Account.Manage
  syntax:
    content: public int RecoveryCodesLeft { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property RecoveryCodesLeft As Integer
  overload: TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel.RecoveryCodesLeft*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel.Is2faEnabled
  commentId: P:TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel.Is2faEnabled
  id: Is2faEnabled
  parent: TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel
  langs:
  - csharp
  - vb
  name: Is2faEnabled
  nameWithType: TwoFactorAuthenticationModel.Is2faEnabled
  fullName: TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel.Is2faEnabled
  type: Property
  source:
    id: Is2faEnabled
    path: C:\Users\Adriana\Documents\GitHub\ticketSystem-team-terminator\src\TicketShopWebApplication\Pages\Account\Manage\TwoFactorAuthentication.cshtml.cs
    startLine: 34
  assemblies:
  - TicketShopWebApplication
  namespace: TicketShopWebApplication.Pages.Account.Manage
  syntax:
    content: public bool Is2faEnabled { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property Is2faEnabled As Boolean
  overload: TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel.Is2faEnabled*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel.OnGet
  commentId: M:TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel.OnGet
  id: OnGet
  parent: TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel
  langs:
  - csharp
  - vb
  name: OnGet()
  nameWithType: TwoFactorAuthenticationModel.OnGet()
  fullName: TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel.OnGet()
  type: Method
  source:
    id: OnGet
    path: C:\Users\Adriana\Documents\GitHub\ticketSystem-team-terminator\src\TicketShopWebApplication\Pages\Account\Manage\TwoFactorAuthentication.cshtml.cs
    startLine: 37
  assemblies:
  - TicketShopWebApplication
  namespace: TicketShopWebApplication.Pages.Account.Manage
  syntax:
    content: public Task<IActionResult> OnGet()
    return:
      type: Task{IActionResult}
    content.vb: Public Function OnGet As Task(Of IActionResult)
  overload: TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel.OnGet*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: TicketShopWebApplication.Pages.Account.Manage
  commentId: N:TicketShopWebApplication.Pages.Account.Manage
  isExternal: false
  name: TicketShopWebApplication.Pages.Account.Manage
  nameWithType: TicketShopWebApplication.Pages.Account.Manage
  fullName: TicketShopWebApplication.Pages.Account.Manage
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel.#ctor*
  commentId: Overload:TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel.#ctor
  isExternal: false
  name: TwoFactorAuthenticationModel
  nameWithType: TwoFactorAuthenticationModel.TwoFactorAuthenticationModel
  fullName: TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel.TwoFactorAuthenticationModel
- uid: UserManager{TicketShopWebApplication.Data.ApplicationUser}
  commentId: '!:UserManager{TicketShopWebApplication.Data.ApplicationUser}'
  definition: UserManager`1
  name: UserManager<ApplicationUser>
  nameWithType: UserManager<ApplicationUser>
  fullName: UserManager<TicketShopWebApplication.Data.ApplicationUser>
  nameWithType.vb: UserManager(Of ApplicationUser)
  fullName.vb: UserManager(Of TicketShopWebApplication.Data.ApplicationUser)
  name.vb: UserManager(Of ApplicationUser)
  spec.csharp:
  - uid: UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: UserManager
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TicketShopWebApplication.Data.ApplicationUser
    name: ApplicationUser
    nameWithType: ApplicationUser
    fullName: TicketShopWebApplication.Data.ApplicationUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: UserManager
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TicketShopWebApplication.Data.ApplicationUser
    name: ApplicationUser
    nameWithType: ApplicationUser
    fullName: TicketShopWebApplication.Data.ApplicationUser
  - name: )
    nameWithType: )
    fullName: )
- uid: SignInManager{TicketShopWebApplication.Data.ApplicationUser}
  commentId: '!:SignInManager{TicketShopWebApplication.Data.ApplicationUser}'
  definition: SignInManager`1
  name: SignInManager<ApplicationUser>
  nameWithType: SignInManager<ApplicationUser>
  fullName: SignInManager<TicketShopWebApplication.Data.ApplicationUser>
  nameWithType.vb: SignInManager(Of ApplicationUser)
  fullName.vb: SignInManager(Of TicketShopWebApplication.Data.ApplicationUser)
  name.vb: SignInManager(Of ApplicationUser)
  spec.csharp:
  - uid: SignInManager`1
    name: SignInManager
    nameWithType: SignInManager
    fullName: SignInManager
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TicketShopWebApplication.Data.ApplicationUser
    name: ApplicationUser
    nameWithType: ApplicationUser
    fullName: TicketShopWebApplication.Data.ApplicationUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SignInManager`1
    name: SignInManager
    nameWithType: SignInManager
    fullName: SignInManager
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TicketShopWebApplication.Data.ApplicationUser
    name: ApplicationUser
    nameWithType: ApplicationUser
    fullName: TicketShopWebApplication.Data.ApplicationUser
  - name: )
    nameWithType: )
    fullName: )
- uid: ILogger{TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel}
  commentId: '!:ILogger{TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel}'
  definition: ILogger`1
  name: ILogger<TwoFactorAuthenticationModel>
  nameWithType: ILogger<TwoFactorAuthenticationModel>
  fullName: ILogger<TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel>
  nameWithType.vb: ILogger(Of TwoFactorAuthenticationModel)
  fullName.vb: ILogger(Of TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel)
  name.vb: ILogger(Of TwoFactorAuthenticationModel)
  spec.csharp:
  - uid: ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel
    name: TwoFactorAuthenticationModel
    nameWithType: TwoFactorAuthenticationModel
    fullName: TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel
    name: TwoFactorAuthenticationModel
    nameWithType: TwoFactorAuthenticationModel
    fullName: TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel
  - name: )
    nameWithType: )
    fullName: )
- uid: UserManager`1
  isExternal: true
  name: UserManager<>
  nameWithType: UserManager<>
  fullName: UserManager<>
  nameWithType.vb: UserManager(Of )
  fullName.vb: UserManager(Of )
  name.vb: UserManager(Of )
  spec.csharp:
  - uid: UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: UserManager
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: UserManager
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SignInManager`1
  isExternal: true
  name: SignInManager<>
  nameWithType: SignInManager<>
  fullName: SignInManager<>
  nameWithType.vb: SignInManager(Of )
  fullName.vb: SignInManager(Of )
  name.vb: SignInManager(Of )
  spec.csharp:
  - uid: SignInManager`1
    name: SignInManager
    nameWithType: SignInManager
    fullName: SignInManager
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SignInManager`1
    name: SignInManager
    nameWithType: SignInManager
    fullName: SignInManager
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: ILogger`1
  isExternal: true
  name: ILogger<>
  nameWithType: ILogger<>
  fullName: ILogger<>
  nameWithType.vb: ILogger(Of )
  fullName.vb: ILogger(Of )
  name.vb: ILogger(Of )
  spec.csharp:
  - uid: ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel.HasAuthenticator*
  commentId: Overload:TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel.HasAuthenticator
  isExternal: false
  name: HasAuthenticator
  nameWithType: TwoFactorAuthenticationModel.HasAuthenticator
  fullName: TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel.HasAuthenticator
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel.RecoveryCodesLeft*
  commentId: Overload:TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel.RecoveryCodesLeft
  isExternal: false
  name: RecoveryCodesLeft
  nameWithType: TwoFactorAuthenticationModel.RecoveryCodesLeft
  fullName: TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel.RecoveryCodesLeft
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel.Is2faEnabled*
  commentId: Overload:TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel.Is2faEnabled
  isExternal: false
  name: Is2faEnabled
  nameWithType: TwoFactorAuthenticationModel.Is2faEnabled
  fullName: TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel.Is2faEnabled
- uid: TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel.OnGet*
  commentId: Overload:TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel.OnGet
  isExternal: false
  name: OnGet
  nameWithType: TwoFactorAuthenticationModel.OnGet
  fullName: TicketShopWebApplication.Pages.Account.Manage.TwoFactorAuthenticationModel.OnGet
- uid: Task{IActionResult}
  commentId: '!:Task{IActionResult}'
  definition: Task`1
  name: Task<IActionResult>
  nameWithType: Task<IActionResult>
  fullName: Task<IActionResult>
  nameWithType.vb: Task(Of IActionResult)
  fullName.vb: Task(Of IActionResult)
  name.vb: Task(Of IActionResult)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IActionResult
    name: IActionResult
    nameWithType: IActionResult
    fullName: IActionResult
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IActionResult
    name: IActionResult
    nameWithType: IActionResult
    fullName: IActionResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
